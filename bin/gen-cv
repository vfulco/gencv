#!/usr/bin/env python2.4

'''
GenCV: a tool for data-driven generation of resumes and CV websites
by Mike Kramlich
'''

import commands
import os
from xml.sax.saxutils import escape
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.pdfgen import canvas
from reportlab.platypus import Paragraph, Frame, SimpleDocTemplate, Spacer

GenCV_URL = 'http://github.com/mkramlich/gencv/tree/master'

template_dir = 'templates'
gen_root = 'generated/'
profile = 'sample'
should_obfuscate_email_on_web = True

EOL = '<br/>\n'

class Model:
    name = None
    title = None
    location = None
    summary = None
    email = None
    phone = None
    linkedin = None
    jobs = None
    edus = None
    websites = None
    wares = None
    presens = None
    blogs = None
    beliefs = None
    quotes = None
    baseurl = None

def cmd(cmdline):
    return commands.getoutput(cmdline)

def sp(qty=1):
    return '' * qty

def nbsp(qty=1):
    return '&nbsp;' * qty

def tab(qty=1):
    return nbsp(qty*4)

def quote(txt):
    return '&quot;' + txt + '&quot;'

def ital(txt):
    return '<i>' + txt + '</i>'

def bold(txt):
    return '<b>' + txt + '</b>'

def table(rows=[[],]):
    s = '<table>\n'
    for row in rows:
        s += '<tr>\n'
        for cell in row:
            s += sp(4) + '<td>%s</td>\n' % cell
        s += '</tr>\n'
    s += '</table>\n'
    return s

def file_as_lines(fname):
    f = file(fname,'r')
    lns = f.readlines()
    f.close()
    return lns

def data_as_lines(fname):
    return file_as_lines('profiles/%s/data/%s' % (profile,fname))

def create_file(fname, body):
    f = file(fname,'w')
    f.write(body)
    f.close()

def image_link_local(fname):
    return '<img src="photos/%s"/>' % fname

def thumbnail_to_image_link_local(thumbfname, fullfname):
    return '<a href="photos/%s"><img src="photos/%s"/></a>' % (fullfname,thumbfname)

def value_on_line(lines, lineno):
    return lines[lineno].rstrip().split('=')[1]

def link(text, url):
    return '<a href="%s">%s</a>' % (url, text)

def sort_jobs_recent_first(jobs):
    j2 = list(jobs)

    def cmp_(a, b):
        if a.to == 'present':
            if b.to == 'present': return 0
            else: return +1
        if b.to == 'present':
            return -1
        ma,ya = a.to.split('/')
        mb,yb = b.to.split('/')
        ma = int(ma)
        ya = int(ya)
        mb = int(mb)
        yb = int(yb)
        if ya == yb:
            return cmp(ma,mb)
        else:
            return cmp(ya,yb)

    j2.sort(cmp=cmp_,reverse=True)
    return j2

def html_encode(s):
    return escape(s, {'"':'&quot;'})

def url_encode(url):
    return url.replace(' ','%20')

def get_model():
    m = Model()

    lns = data_as_lines('main')
    m.baseurl = value_on_line(lns,0)
    m.name = value_on_line(lns,1)
    m.email = value_on_line(lns,2)
    m.title = value_on_line(lns,3)
    m.location = value_on_line(lns,4)
    m.linkedin = value_on_line(lns,5)
    m.phone = value_on_line(lns,6)

    m.summary = data_as_lines('desc')

    m.quotes = data_as_lines('quotes')

    m.jobs = []
    jobsroot = 'profiles/%s/data/jobs' % profile
    jobfnames = os.listdir(jobsroot)
    class Job: pass
    for jobfname in jobfnames:
        job = Job()
        lns = file_as_lines(jobsroot + '/' + jobfname)
        job.title = value_on_line(lns,0)
        job.company = value_on_line(lns,1)
        job.ffrom = value_on_line(lns,2)
        job.to = value_on_line(lns,3)
        job.website = value_on_line(lns,4)
        if len(lns) >= 7:
            job.desc = lns[6:]
        else: job.desc = None
        m.jobs.append(job)
    m.jobs = sort_jobs_recent_first(m.jobs)

    m.edus = []
    eduroot = 'profiles/%s/data/edu' % profile
    edufnames = os.listdir(eduroot)
    class Edu: pass
    for edufname in edufnames:
        edu = Edu()
        lns = file_as_lines(eduroot + '/' + edufname)
        edu.school_name = value_on_line(lns,0)
        edu.topics = value_on_line(lns,1)
        edu.ffrom = value_on_line(lns,2)
        edu.to = value_on_line(lns,3)
        edu.desc = value_on_line(lns,4)
        m.edus.append(edu)

    m.websites = []
    class Website: pass
    lns = data_as_lines('websites_created')
    for ln in lns:
        site = Website()
        m.websites.append(site)
        pcs = ln.split(',')
        site.name = pcs[0].strip()
        site.url = pcs[1].strip()
        techs = pcs[2].strip()
        site.techs = techs.split(';')

    m.wares = []
    class Software: pass
    swroot = 'profiles/%s/data/software/' % profile
    wfnames = os.listdir(swroot)
    for wfname in wfnames:
        fpath = swroot + wfname
        lns = file_as_lines(fpath)
        ware = Software()
        ware.name = lns[0]
        rest = 1
        if lns[1].startswith('url='):
            ware.url = lns[1].split('=')[1]
            rest = 2
        else: ware.url = None
        ware.desc = lns[rest:]
        m.wares.append(ware)

    m.presens = []
    class Presentation: pass
    fnames = os.listdir(gen_root+'presentations')
    for fname in fnames:
        presen = Presentation()
        m.presens.append(presen)
        presen.name = '.'.join(fname.split('.')[:-1])
        presen.relurl = 'presentations/' + fname

    m.blogs = []
    class Blog: pass
    lns = data_as_lines('blogs')
    for ln in lns:
        blog = Blog()
        m.blogs.append(blog)
        pcs = ln.split(',')
        blog.name = pcs[0].strip()
        blog.url = pcs[1].strip()
        blog.desc = pcs[2].strip()


    lns = data_as_lines('beliefs')
    m.beliefs = []
    class Belief: pass
    belief = None
    for ln in lns:
        if ln.startswith('tags:'):
            belief = Belief()
            m.beliefs.append(belief)
            belief.body = []
            pcs = ln.split(':')
            tags = pcs[1].strip()
            tags = tags.split(',')
            tags2 = []
            for t in tags:
                tags2.append(t.strip())
            tags = tags2
            belief.tags = tags
            continue
        if ln.strip() == '':
            continue
        belief.body.append(ln.strip())

    return m

def create_codesample_page(codefname, codesamples_root, i):
    s = codefname + ':' + EOL
    code = ''
    lns = file_as_lines(codesamples_root + '/' + codefname)
    for ln in lns:
        code += ln
    code = html_encode(code)
    s +=  '<code><pre>%s</pre></code>' % code + EOL
    page = 'pages/codesamp-%s.html' % i
    create_file(gen_root+page,s)
    suf2lang = {
        'sh'   : 'Bourne shell',
        'zsh'  : 'Z shell',
        'ksh'  : 'Korn shell',
        'lisp' : 'Lisp',
        'py'   : 'Python',
        'rb'   : 'Ruby',
        'pl'   : 'Perl',
        'java' : 'Java',
        'erl'  : 'Erlang',
        'for'  : 'Fortran',
        'd'    : 'D',
        'cpp'  : 'C++',
        'c'    : 'C',
        'asm'  : 'assembly'}
    suf = ('.' in codefname) and codefname.split('.')[-1] or None
    lang = suf and (suf in suf2lang) and suf2lang[suf] or '?'
    linecount = len(lns)
    return page, lang, linecount

def code_samples_exist():
    codesamples_root = 'profiles/%s/codesamples' % profile
    codefnames = os.listdir(codesamples_root)
    codefnames = filter(lambda fname: not fname.startswith('.'), codefnames)
    return len(codefnames) > 0

def create_codesamples_page(codesamplespage, baseurl):
    s = 'Code Samples' + EOL

    s += EOL + 'On Site' + EOL
    codesamples_root = 'profiles/%s/codesamples' % profile
    codefnames = os.listdir(codesamples_root)
    csi = 0
    rows = []
    for codefname in codefnames:
        if codefname.startswith('.'):
            continue
        pagefname, lang, linecount = create_codesample_page(codefname,codesamples_root,csi)
        html_link = link('as HTML',baseurl+pagefname)
        direct_link = link('as actual', baseurl+codesamples_root+'/'+codefname)
        row = [tab() + '%s' % codefname, tab()+lang, tab()+str(linecount)+' lines', tab()+html_link, tab()+direct_link]
        rows.append(row)
        csi += 1
    s += table(rows) + EOL

    s += EOL + 'Off Site' + EOL
    lns = data_as_lines('codesamples_offsite')
    rows = []
    for ln in lns:
        d = ln.find(':')
        lang = ln[:d].strip()
        url = ln[d+1:].strip()
        row = [tab() + '%s:' % lang, '%s' % link(url,url)]
        rows.append(row)
    s += table(rows) + EOL

    create_file(gen_root+codesamplespage,s)

def render_beliefs(beliefs):
    if len(beliefs) == 0:
        return ''

    s = EOL + 'Observations & Beliefs' + EOL

    for b in beliefs:
        s += EOL
        for ln in b.body:
            s += tab() + ln + EOL
        tags = ', '.join(b.tags)
        s += tab(2) + ital('tags: %s' % tags) + EOL
    s += EOL
    return s

def obfuscate_email_for_scrapers(email):
    return '-'.join(email)

def generate_cv_web(model):
    m = model
    cmd('push-static-to-gen %s %s' % (profile, gen_root))
    cmd('chmod 644 %sresumes/*' % gen_root)

    s = 'Online CV' + EOL*2
    s += m.name + EOL
    s += m.title + EOL
    if len(m.location) > 0:
        s += m.location + EOL
    s += EOL

    imagefnames = os.listdir('profiles/%s/photos' % profile)
    if len(imagefnames) > 0:
        thumbs = {}
        fulls = []
        for imagefname in imagefnames:
            if '.thumb.' in imagefname:
                pcs = imagefname.split('.thumb.')
                full = pcs[0] + '.' + pcs[1]
                thumbs[full] = imagefname
            else:
                fulls.append(imagefname)

        for full in fulls:
            if full in thumbs:
                s += thumbnail_to_image_link_local(thumbs[full],full)
            else:
                s += image_link_local(full)
        s += EOL

    if len(m.summary) > 0:
        s += EOL + 'Summary' + EOL
        for ln in m.summary:
            s += EOL + ln
        s += EOL

    if code_samples_exist():
        s += EOL + 'Code Samples' + EOL*2
        codesamplespage = 'pages/codesamples.html'
        create_codesamples_page(codesamplespage,m.baseurl)
        s += tab() + link('click here',m.baseurl+codesamplespage) + EOL

    if len(m.jobs) > 0:
        s += EOL + 'Employment' + EOL
        for j in m.jobs:
            s += EOL
            s += tab() + j.title + EOL
            s += tab() + link(j.company,j.website) + EOL
            s += tab() + j.ffrom + ' - ' + j.to + EOL
            s += tab() + link(j.website,j.website) + EOL

    if len(m.edus) > 0:
        s += EOL + 'Education' + EOL
        for edu in m.edus:
            s += EOL + tab() + '%s, %s-%s' % (edu.school_name, edu.ffrom, edu.to)
        s += EOL

    if len(m.websites) > 0:
        s += EOL + 'Websites Created' + EOL
        for site in m.websites:
            s += EOL
            s += tab() + link(site.name,site.url) + EOL
            s += tab() + ital('used: ' + ', '.join(site.techs)) + EOL

    if len(m.wares) > 0:
        s += EOL + 'Software Created' + EOL
        for ware in m.wares:
            s += EOL + tab() + ital(ware.name) + EOL
            s += tab() + EOL.join(ware.desc) + EOL
            if ware.url is not None:
                s += tab() + 'see it: ' + link(ware.url,ware.url) + EOL

    if len(m.presens) > 0:
        s += EOL + 'Presentations' + EOL*2
        for presen in m.presens:
            txt = presen.name
            url = m.baseurl + presen.relurl
            s += tab() + link(txt,url) + EOL

    if len(m.blogs) > 0:
        s += EOL + 'Blogs' + EOL*2
        rows = []
        for blog in m.blogs:
            row = (tab()+link(blog.name,blog.url), blog.desc)
            rows.append(row)
        s += table(rows) + EOL

    s += render_beliefs(m.beliefs)

    if len(m.quotes) > 0:
        s += EOL + 'Quotes' + EOL*2
        for q in m.quotes:
            s += tab() + quote(q.strip()) + EOL

    if len(m.linkedin) > 0:
        s += EOL + 'Online Profiles' + EOL*2
        s += tab() + link('LinkedIn.com',m.linkedin) + EOL

    fnames = os.listdir(gen_root+'resumes')
    if len(fnames) > 0:
        s += EOL + 'Downloadable Resumes' + EOL*2
        for fname in fnames:
            format = fname.split('.')[-1]
            txt = fname
            url = m.baseurl + 'resumes/' + fname
            s += tab() + link(txt,url) + EOL

    if len(m.email) > 0:
        s += EOL + 'Contact Info' + EOL*2
        if should_obfuscate_email_on_web:
            email = obfuscate_email_for_scrapers(m.email)
            s += tab() + 'email: ' + email + EOL
            s += tab() + ital("NOTE: Email address above is obfuscated to fight spammers/scrapers. Remove extra -'s.") + EOL
        else:
            s += tab() + 'email: ' + link(m.email,'mailto:'+m.email) + EOL

    s += '<!--This website was made using GenCV. GenCV made by Mike Kramlich. Get it at %s-->' % GenCV_URL

    create_file(gen_root+'index.html',s)

def generate_resume_txt(model, resume_template='default'):
    m = model

    s = 'Jobs:\n'
    def tab(): return '' * 4
    for j in m.jobs:
        s += '\n'
        s += tab() + j.title + '\n'
        s += tab() + j.company + '\n'
        s += tab() + j.ffrom + ' - ' + j.to + '\n'
        if len(j.website) > 0:
            s += tab() + j.website + '\n'
        if j.desc is not None:
            for ln in j.desc:
                ln = ln.rstrip()
                s += tab() + ln + '\n'
    jobs = s
    params = {
        'name' :     m.name,
        'location' : m.location,
        'summary' :  'Summary:\n\n' + ''.join(m.summary),
        'email' :    m.email,
        'jobs' :     jobs}
    out_lns = []
    templ_lns = file_as_lines('%s/%s' % (template_dir,resume_template))
    for ln in templ_lns:
        out_lns.append(ln.rstrip() % params)
    s = '\n'.join(out_lns) + '\n'
    resume_fname = 'resume_%s.txt' % resume_template
    fpath = gen_root + 'resumes/' + resume_fname
    create_file(fpath,s)

def generate_resume_pdf(model, resume_template='default'):
    m = model

    stylesheet = getSampleStyleSheet()
    ps = parastyle = stylesheet['Normal']
    base = 'resume_' + m.name.replace(' ','_')
    pdf_fpath = gen_root + 'resumes/' + base + '.pdf'
    doc = SimpleDocTemplate(pdf_fpath) 
    story = [] 

    def blankline():
        sp = Spacer(1, 0.125*inch)
        story.append(sp)

    def sectionspace():
        sp = Spacer(1, 0.25*inch)
        story.append(sp)

    def p(txt, bold=False, section=False, ital=False, link=False):
        txt = txt.rstrip()
        if len(txt) == 0:
            blankline()
        else:
            if link:
                txt = '<a href="%s">%s</a>' % (url_encode(txt),txt)
            else:
                txt = html_encode(txt)
                if section: txt = '<b><u>%s</u></b>' % txt
                if bold: txt = '<b>%s</b>' % txt
                if ital: txt = '<i>%s</i>' % txt
            story.append(Paragraph(txt,ps))

    def url(txt, **kwargs):
        kwargs['link'] = True
        p(txt,**kwargs)

    p(m.name,bold=True)
    p(m.title,bold=True)
    p(m.location)
    sectionspace()

    for ln in m.summary:
        if ln.startswith('http://'):
            url(ln)
        else:
            p(ln)
    sectionspace()

    p('Contact Info',section=True)
    blankline()
    p('email: ' + m.email)
    p('phone: ' + m.phone)
    sectionspace()

    if len(m.jobs) > 0:
        p('Employment',section=True)
        blankline()
        for j in m.jobs:
            p(j.title,bold=True)
            p(j.company,bold=True)
            p(j.ffrom + ' - ' + j.to,ital=True)
            if len(j.website) > 0:
                url(j.website)
            if j.desc is not None:
                blankline()
                for ln in j.desc:
                    p(ln)
            sectionspace()

    if len(m.edus) > 0:
        p('Education',section=True)
        blankline()
        for e in m.edus:
            p(e.school_name,bold=True)
            p(e.topics,ital=True)
            p(e.ffrom + ' - ' + e.to)
            if len(e.desc) > 0:
                blankline()
                p(e.desc)
            sectionspace()

    if len(m.websites) > 0:
        p('Websites Created',section=True)
        blankline()
        for site in m.websites:
            p(site.name,ital=True)
            url(site.url)
            techmsg = ', '.join(site.techs)
            p(techmsg)
            sectionspace()

    if len(m.wares) > 0:
        p('Software Created',section=True)
        blankline()
        for ware in m.wares:
            p(ware.name,ital=True)
            for ln in ware.desc:
                p(ln)
            if ware.url is not None:
                url(ware.url)
            sectionspace()

    if len(m.presens) > 0:
        p('Presentations',section=True)
        blankline()
        for presen in m.presens:
            p(presen.name,ital=True)
            url(m.baseurl + presen.relurl)
            sectionspace()

    if len(m.blogs) > 0:
        p('Blogs',section=True)
        blankline()
        for blog in m.blogs:
            p(blog.name,ital=True)
            p(blog.desc)
            url(blog.url)
            sectionspace()

    doc.build(story)


if __name__ == '__main__':
    import sys

    print ' '.join(sys.argv)

    if len(sys.argv) >= 2:
        profile = sys.argv[1]

    model = get_model()

    if len(sys.argv) >= 3:
        model.baseurl = sys.argv[2]

    template_fnames = os.listdir(template_dir)
    for tfname in template_fnames:
        generate_resume_txt(model,tfname)

    generate_resume_pdf(model)

    generate_cv_web(model)
